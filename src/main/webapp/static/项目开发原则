CRM项目开发目标
1. 编程思想
2. 代码含义(弄懂每一行代码)
3. 总结分析开发时的困难
4. 总结开发经验


每日笔记:
----------day1---------
  采用技术架构
    a. 视图层(View)
    	|-数据的展现
	 \-HTML技术(表现形式过于单一)
	  \-CSS技术(渲染页面,让页面更好看)
	|-用户的交互
	 \-JavaScript技术(原生代码太过繁杂)
	  \-jQuery(对js的封装,提高开发效率)
	|-bootstrap技术(对以上技术进行整体封装,提高效率)
	|-数据渲染
	 \-thymeleaf技术
    b. 控制层(Controller)
        |-整体的流程控制,调用业务层处理业务
	 \-servlet(处理请求及其发送来的数据)
	  \-springmvc(大大简化了开发,对数据自动封装)
    c. 业务层(Service)
    	|- JavaSE(处理业务逻辑,保证原子性)
    d. 持久化层(Repository)
	|-JDBC(操作数据库)
	 \-MYbatis(逆向工程)
    e. 整合层
   	|-spring(IOC,AOP管理依赖注入)

软件公司组织架构
  1.研发部(程序员[一般几十个,分成好几个项目,程序员之间分等级,包括项目经理和项目组长等]
  	   美工[一般一个项目两个,一个是主要进行前端页面开发,一个负责美术,画页面]
	   DBA[一般一个项目几个,主要对数据库开发,优化sql语句])
  2.测试部(找BUG)
  Ps:由于人情世故,当我们的代码出现BUG时,不要修复,留一点证明自己的价值,也给测开留点后路
  3.实施部(帮用户部署服务器,并装上软件) 
  4.产品部(设计产品)
  5.运维部(帮助客户维护产品)
  6.市场部***(拿项目)
软件开发的声明周期
 1:投标 -> 招标
 2.可行性分析(人力与资金) 
 3.需求分析
   3.1项目经理->项目原型:更便于客户确定他所需要的需求[不要写的太华丽,避免客户加需求]
   3.2需求调研->主要是对客户进行需求调研{如果遇到难做的项目,可介绍替代方案,不要说难做} 
   3.3>>>需求文档<<<
 4.分析与设计
 |+架构设计(整体)
  \+物理架构分析(主要是硬件层面的分析)
   \-应用服务器:tomcat{tomcat支持的协议有限,大公司一般不用}  --- JavaEE 企业应用开发
   \-数据库服务器:MySQL,Oracle....
  \+逻辑架构分析(代码分层 视图->控制->业务->持久化)
  \+技术选型
    Java(除了Java,其他技术也可以开发web应用) 
 ----------------day2---------------
 |+项目设计(具体)
 \-物理模型设计:项目经理来决定数据库中表,表中字段,字段类型与长度,表的关系等
 	PowerDesigner .pdm
 \-逻辑模型设计:程序员来设计类,类里面的方法和属性以及对应所需要的功能,类的关系等
 	RationalROse .pdl
 \-界面设计:产品经理与美工共同设计界面,类似于项目模型
  \+企业级应用: 朴素,效率要求不高
  \-互联网应用: 炫酷,需要高效
 \-算法设计:项目经理设计算法来调高项目的效率
5.搭建开发环境
  创建maven工程,配置依赖,配置配置文件...
  一般分布式版本控制来完成
6.编码实现 --- 注释
7.测试  --- 测试用例
  一般编码实现与测试交替进行
8.试运行 --- 使用手册
9.上线(给钱) --- 实施手册
10.运维[一个产品的生命周期一般都是几年] --- 运维手册
 	每一个阶段都要杜撰文档
	标书,可行性分析报告,需求文档,架构文档,项目设计文档,算法设计文档,技术架构文档,项目模型 ---
















